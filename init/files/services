#!/mss/bin/sh
# 0 > include device specific vars
. /mss/files/device.conf
. /mss/files/machines/"${amachine}".conf

# 1 > service specific functions
# 1.1 > nfs
stopnfsbase(){
 ainitsvc "nfs" "stopping rpcbind"
 ainit_kill rpcbind

 ainitsvc "nfs" "stopping rpc.statd"
 ainit_kill rpc.statd
 if [ -f /var/run/rpc.statd.pid ]; then rm -f /var/run/rpc.statd.pid; fi
}

startnfsbase(){
 ainitsvc "nfs" "starting rpcbind"
  rpcbind
 evalret

 ainitsvc "nfs" "starting rpc.statd"
  rpc.statd -p 31310 -o 31311 --no-notify
 evalret
}

# 1.2 > swap
checkswaps(){
 if [ "$(wc -l /proc/swaps | awk '{print $1}')" -gt 1 ]
  then
   ainitsvc "swap" "found active swap(s), disabling"
    swapoff -a >/dev/null 2>&1
   evalret
  else
   ainitsvc "swap" "no active swaps found"; infoprompt
 fi

 if [ ! "$(cat /sys/block/zram0/size)" -eq 0 ]; then
  ainitsvc "swap" "resetting zram"
   echo "1" > /sys/block/zram0/reset
  evalret
 fi
}

# 1.3 > nginx
cdnginx(){
 nginxdir="$(nginx -h 2>&1 \
              | awk '/-c\ filename\ /{gsub(/\/nginx\.conf)/,"");\
                                       print $8}')"

 if [ ! -d "${nginxdir}" ]
  then
   ainitsvc "nginx" "nginx directory does not exist"; failprompt

   if [ "${1}" = "stop" ]
    then return 69
    else exit 1
   fi
  else
   cd "${nginxdir}"
 fi
}

# 1.4 > nfqws
nfqws_iptb(){
 iptables -t mangle "-${1}" POSTROUTING    \
  -p tcp -o "${2}"                         \
  -m multiport --dports 80,443             \
  -m connbytes --connbytes-dir=original    \
  --connbytes-mode=packets --connbytes 1:4 \
  -m mark ! --mark 0x40000000/0x40000000   \
  -j NFQUEUE --queue-num 200 --queue-bypass >/dev/null 2>&1
}

# 1.5 > network
checkiface(){
 if ip addr \
     | awk '/^[0-9]/{gsub(/:/,""); print $2}' \
     | grep -w "${1}" >/dev/null 2>&1
  then return 0
  else return 1
 fi
}

# 1.6 > iptables
ipt_nukeall(){
 ainitsvc "iptables" "flushing, deleting, clearing"
  for i in ${tblist}; do
   iptables -t "${i}" --flush        &&
   iptables -t "${i}" --delete-chain &&
   iptables -t "${i}" --zero
  done
 evalret
}

# 2 > services themselves
# 2.1 > gpm
svc_gpm(){
case "$1" in
 start)
  ainitsvc "gpm" "starting"
   gpm -m /dev/input/mice -t imps2 >/dev/null 2>&1
  evalret
 ;;
 stop)
  ainitsvc "gpm" "stopping"
  ainit_kill gpm
 ;;
 *)
  ainitusage "{start|stop}"
  exit 1
 ;;
esac
}

# 2.2 > iptables
svc_iptables(){
 tblist="$(cat /proc/net/ip_tables_names)"

 case "$1" in
  start)
   ainitsvc "iptables" "dropping all by default"
    for i in INPUT FORWARD OUTPUT; do
     iptables -t filter --policy "${i}" DROP
    done
   evalret

   ipt_nukeall

   ainitsvc "iptables" "setting the rules"
    . /mss/init/files/iptables.script
   evalret
  ;;
  stop)
   ipt_nukeall

   ainitsvc "iptables" "accepting all"
    for i in INPUT OUTPUT FORWARD; do
     iptables -t filter --policy "${i}" ACCEPT
    done
   evalret
  ;;
  status)
   ainit_nc
   for i in ${tblist}; do
    ainitmes "${i}: "; infoprompt
    iptables -t "${i}" -S
    ainit_nc
   done
  ;;
  *)
   ainitusage "{start|stop|status}"
   exit 1
  ;;
 esac
}

# 2.2.1 > nfqws
svc_nfqws(){
 nfqwspid="$(pidof nfqws)"
    iface="$(grep 00000000 /proc/net/route | awk 'NR==1 {print $1}')"

 case "$1" in
  start)
   if [ ! -z "${nfqwspid}" ]
    then
     ainitsvc "nfqws" "already running"; failprompt
    else

     if [ -z "${iface}" ]
      then
       ainitsvc "nfqws" "no active iface found"; failprompt
       exit 1
      else
       ainitsvc "nfqws" "going with ${iface}"; infoprompt
     fi

     ainitsvc "nfqws" "setting the rules"
      nfqws_iptb I "${iface}"
     evalret

     ainitsvc "nfqws" "starting"
      nfqws \
       --uid=0:0                      \
       --qnum=200                     \
       --dpi-desync-fwmark=0x40000000 \
       --wssize=1:6                   \
       --hostcase                     \
       --hostspell=hoST               \
       --hostnospace                  \
       --domcase                      \
       --dpi-desync=fake              \
       --dpi-desync-fooling=md5sig    \
       --dpi-desync-retrans=1         \
       --dpi-desync-skip-nosni=0      \
       --dpi-desync-ttl=6 >/dev/null 2>&1 &
     evalret
   fi
  ;;
  stop)
   if [ ! -z "${nfqwspid}" ]
    then
     ainitsvc "nfqws" "clearing the rules"
      nfqws_iptb D ${iface}
     evalret

     ainitsvc "nfqws" "stopping"
     ainit_kill nfqws
    else
     ainitsvc "nfqws" "not running"; failprompt
   fi
  ;;
  *)
   ainitusage "{start|stop}"
   exit 1
  ;;
 esac
}

# 2.3 > mpd
svc_mpd(){
 mpdconf="/opt/muzak/etc/mpd.conf"

 case "$1" in
  start)
   if [ -d "$(awk '/music_directory/{gsub(/\"/,""); print $2}' ${mpdconf})" ]
    then
     ainitsvc "mpd" "starting mpd"
      doas -u mss mpd "${mpdconf}" >/dev/null 2>&1
     evalret

     ainitsvc "mpd" "setting up"
      mpc repeat  on  >/dev/null 2>&1 &&
      mpc random  off >/dev/null 2>&1 &&
      mpc single  off >/dev/null 2>&1 &&
      mpc consume off >/dev/null 2>&1 &&
      mpc disable only "$(mpc outputs | awk '/http/{print $2}')" >/dev/null 2>&1
     evalret

     ainitsvc "mpd" "starting ympd"
      doas -u mss ympd >/dev/null 2>&1 &
     evalret
    else
     ainitsvc "mpd" "music_directory does not exist"; failprompt
     exit 1
   fi
  ;;
  stop)
   ainitsvc "mpd" "stopping ympd"
   ainit_kill ympd

   ainitsvc "mpd" "stopping mpd"
   ainit_kill mpd
  ;;
  *)
   ainitusage "{start|stop}"
   exit 1
  ;;
 esac
}

# 2.4 > network
svc_network(){
case "${1}" in
 start)
  if [ -z "${2}" ]; then
   ainitsvc "network" "specify an interface with \$2"; failprompt
   exit 1
  fi

  if checkiface "${2}"
   then
    iface="${2}"
   else
    ainitsvc "network" "interface "${1}" does not exist"; failprompt
    exit 1
  fi

  if ip addr | grep ${iface} | grep inet >/dev/null 2>&1; then
   ainitsvc "network" "${iface} already has an ip assigned"; failprompt
   exit 1
  fi

  if [ -z "${3}" ]
   then
    ainitsvc "network" "specify a method: {dhcp|static} with \$3"; failprompt
    exit 1
   else
    case ${3} in
     dhcp|static) method="${3}" ;;
     *)
      ainitsvc "network" "input either dhcp or static"; failprompt
      exit 1
     ;;
    esac
  fi

  case "${iface}" in wlan*)
   if [ -z "${4}" ]
    then
     ainitsvc "network" "specify a wpaconf with \$4"; failprompt
     exit 1
    else
     wpaconf="/mss/files/networks/${4}.conf"

     if [ ! -f "${wpaconf}" ]; then
      ainitsvc "network" "${wpaconf} does not exist"; failprompt
      exit 1
     fi
   fi
   ;;
  esac

  case "${method}" in dhcp)
   randommac="$(hexdump -n3 -e'/3 "00:60:2F" 3/1 ":%02X"' /dev/urandom)"

   ainitsvc "network" "setting mac for ${iface} to ${randommac}"
    ip link set dev "${iface}" address "${randommac}" >/dev/null 2>&1
   evalret
  esac

  case "${iface}" in
   usb*|eth*)
    ainitsvc "network" "bringing ${iface} up"
     ip link set "${iface}" up
    evalret
   ;;
   wlan*)
    ainitsvc "network" "invoking wpa_supplicant"
     wpa_supplicant -B -i "${iface}" -c "${wpaconf}" >/dev/null 2>&1
    evalret
   ;;
  esac

  case "${method}" in
   static)
    ainitsvc "network" "adding ${amach_ip} to ${iface}"
     ip addr add "${amach_ip}" broadcast "${amach_bc}" dev "${iface}"
    evalret

    ainitsvc "network" "setting up the default gateway"
     ip route add default via "${amach_gw}" dev "${iface}"
    evalret
   ;;
   dhcp)
    ainitsvc "network" "invoking udhcpc"
     udhcpc \
      -i "${iface}" \
      -s "/mss/init/files/udhcpc.script" \
      -p "/run/udhcpc.pid"               \
      -B                                 \
      -t 30 -T 2                         \
      -n                                 \
      -R                                 \
      -a                                 \
      -S >/dev/null 2>&1 &
    evalret
   ;;
  esac

  ainitsvc "network" "creating br0"
   ip link add br0 type bridge                                      &&
   ip addr add "192.168.255.1/29" broadcast "192.168.255.7" dev br0 &&
   ip link set dev br0 up
  evalret

  ainitsvc "network" "creating taps"
   for i in tap0 tap1; do
    tunctl -f /dev/net/tun -t "${i}" -u mss -g mss >/dev/null 2>&1 &&
    ip link set dev "${i}" master br0                              &&
    ip link set dev "${i}" up
   done
  evalret

  ainitsvc "network" "applying nat rule for br0<->${iface}"
   iptables -t filter -I FORWARD 1 -i br0 -o "${iface}" -j ACCEPT \
    >/dev/null 2>&1 &&
   iptables -t nat -I POSTROUTING 1 -o "${iface}" -j MASQUERADE   \
    >/dev/null 2>&1 &&
   iptables -t filter -I FORWARD 2 -i "${iface}" -o br0           \
    -m state --state RELATED,ESTABLISHED -j ACCEPT >/dev/null 2>&1
  evalret

  ainitsvc "network" "starting udhcpd for 192.168.255.0/29"
   udhcpd -f -S /mss/init/files/udhcpd.conf >/dev/null 2>&1 &
  evalret
 ;;
 stop)
  if [ -z "${2}" ]; then
   ainitsvc "network" "specify an interface with \$2"; failprompt
   exit 1
  fi

  if checkiface "${2}"
   then
    iface="${2}"
   else
    ainitsvc "network" "interface "${1}" does not exist"; failprompt
    exit 1
  fi

  if ip addr | grep ${iface} | grep inet >/dev/null 2>&1
   then
    ainitsvc "network" "flushing ${iface}"
     ip addr flush dev "${iface}"
    evalret
   else
    ainitsvc "network" "${iface} does not have an ip assigned"; failprompt
    exit 1
  fi

  if [ "`cat /sys/class/net/${iface}/operstate`" == "up" ]; then
   ainitsvc "network" "bringing down ${iface}"
    ip link set "${iface}" down
   evalret
  fi

  if pidof udhcpc >/dev/null 2>&1; then
      dhcpid="$(cat /run/udhcpc.pid)"
   dhcpiface="$(awk '{gsub(/\x00/," "); print $3}' /proc/${dhcpid}/cmdline)"

   if [ "${dhcpiface}" = "${iface}" ]; then
    ainitsvc "network" "stopping udhcpc"
     kill -USR2 "${dhcpid}"
    evalret

    sleep 1

    ainitsvc "network" "killing udhcpc"
    ainit_kill udhcpc
  fi

  case "${iface}" in wlan*)
   if pidof wpa_supplicant >/dev/null 2>&1; then 
    ainitsvc "network" "killing wpa_supplicant"
    ainit_kill wpa_supplicant
   fi
   ;;
  esac
 fi

 ainitsvc "network" "removing nat rule for br0<->${iface}"
  iptables -t filter -D FORWARD -i br0 -o "${iface}" -j ACCEPT \
   >/dev/null 2>&1 &&
  iptables -t nat -D POSTROUTING -o "${iface}" -j MASQUERADE   \
   >/dev/null 2>&1 &&
  iptables -t filter -D FORWARD -i "${iface}" -o br0           \
   -m state --state RELATED,ESTABLISHED -j ACCEPT >/dev/null 2>&1
 evalret

 ainitsvc "network" "stopping udhcpd"
 ainit_kill udhcpd

 ainitsvc "network" "removing br0 and taps"
  for i in br0 tap0 tap1; do
   ip link del "${i}" >/dev/null 2>&1
  done
 evalret
 ;;
 *)
  ainitusage "{start|stop} {iface} {dhcp|static} | {wpaconf}"
  exit 1
 ;;
esac
}

# 2.5 > nfs
svc_nfs(){
 case "$1" in
  start)
   case "${2}" in
    server)
     if [ ! -f /etc/exports ]
      then
       ainitmes "/etc/exports does not exist."; failprompt
       exit 1
     elif [ "$(cat /etc/exports | wc -l)" -eq 0 ]
      then
       ainitmes "/etc/exports is empty."; failprompt
       exit 1
     fi

     startnfsbase 

     ainitsvc "nfs" "starting rpc.nfsd"
      rpc.nfsd -p 2049 "${nfs_threads}"
     evalret

     ainitsvc "nfs" "starting rpc.mountd"
      rpc.mountd -p 31312
     evalret

     ainitsvc "nfs" "running exportfs"
      exportfs -ra >/dev/null 2>&1
     evalret
    ;;
    client)
     startnfsbase
    ;;
    *)
     ainitmes "specify either client or server as \$2."; failprompt
     exit 1
    ;;
   esac
  ;;
  stop)
   case "${2}" in
    server)
     ainitsvc "nfs" "clearing exportfs"
      exportfs -au >/dev/null 2>&1
     evalret

     stopnfsbase     

     ainitsvc "nfs" "stopping kernel nfsd instances"
     ainit_kill nfsd kernel

     ainitsvc "nfs" "stopping rpc.mountd"
     ainit_kill rpc.mountd
    ;;
    client)
     stopnfsbase
    ;;
    *)
    ainitmes "specify either client or server as \$2."; failprompt
    exit 1
    ;;
   esac
  ;;
  reload)
   if [ -z "$(pgrep nfsd)" ]
    then
     ainitmes "no nfsd kernel threads found."; failprompt
     exit 1
    else
     ainitsvc "nfs" "reloading exportfs"
      exportfs -ra >/dev/null 2>&1
     evalret
   fi
  ;;
  *)
   ainitusage "{start|stop}"
   exit 1
  ;;
 esac
}

# 2.6 > ntpd
svc_ntpd(){
 case "$1" in
  start)
   ainitsvc "ntpd" "setting the time"
    ntpd -n -q >/dev/null 2>&1 &
   evalret
   ainitsvc "ntpd" "sys -> hwclock"
    hwclock -w
   evalret
  ;;
  stop)
   ainitsvc "ntpd" "sys -> hwclock"
    hwclock -w
   evalret
  ;;
  *)
   ainitusage "{start|stop}"
   exit 1
  ;;
 esac
}

# 2.7 > sshd
svc_sshd(){
 case "$1" in
  start)
   ainitsvc "sshd" "starting"
    /usr/bin/sshd >/dev/null 2>&1
   evalret
  ;;
  stop)
   ainitsvc "sshd" "stopping"
   ainit_kill sshd
  ;;
  *)
   ainitusage "{start|stop}"
   exit 1
  ;;
 esac
}

# 2.8 > thinkfan
svc_thinkfan(){
 case "$1" in
  start)
   ainitsvc "thinkfan" "starting"
    thinkfan -s 5 -n -q >/dev/null 2>&1 &
   evalret
  ;;
  stop)
   ainitsvc "thinkfan" "stopping"
   ainit_kill thinkfan
  ;;
  *)
   ainitusage "{start|stop}"
   exit 1
  ;;
 esac
}

# 2.9 > transmision
svc_transmission(){
 case "$1" in
  start)
   ainitsvc "transmission" "starting"
    doas -u mss \
     transmission-daemon \
     -g /home/mss/.config/transmission-daemon \
     --allowed "127.0.0.1,192.168.*.*"        \
     --port    "9091"                         \
     --no-auth                                \
     --no-watch-dir                           \
     --no-incomplete-dir                      \
     --dht                                    \
     --utp                                    \
     --paused                                 \
     --portmap                                \
     --global-seedratio 0                     \
     --pid-file "/run/transmission.pid"
   evalret
  ;;
  stop)
   ainitsvc "transmission" "stopping"
   ainit_kill transmission-daemon
  ;;
  *)
   ainitusage "{start|stop}"
   exit 1
  ;;
 esac
}

# 2.10 > swap
svc_swap(){
 case "$1" in
  start)
   case "$2" in
    zram)
     checkswaps

     ainitsvc "swap" "setting up sysfs/procfs for zram as swap"
      echo "${zram_dsize}" > /sys/block/zram0/disksize       &&
      echo "${zram_limit}" > /sys/block/zram0/mem_limit      &&
      echo "${anon_min}"   > /proc/sys/vm/anon_min_kbytes    &&
      echo "${cln_min}"    > /proc/sys/vm/clean_min_kbytes   &&
      echo "${cln_low}"    > /proc/sys/vm/clean_low_kbytes   &&
      echo "${swpns}"      > /proc/sys/vm/swappiness         &&
      echo "${vfs_cps}"    > /proc/sys/vm/vfs_cache_pressure &&
      echo "${wtrm_sf}"    > /proc/sys/vm/watermark_scale_factor
     evalret

     ainitsvc "swap" "creating and enabling zram as swap"
      mkswap -L zram0 /dev/zram0 >/dev/null 2>&1 &&
      swapon -p 100   /dev/zram0
     evalret
     ;;
     swapfile)
     checkswaps

     if [ ! -f "${swappath}" ]
      then
       mkswapfile
      else
       ainitsvc "swap" "setting up sysfs/procfs for swapfile as swap"
        echo "0"   > /proc/sys/vm/anon_min_kbytes    &&
        echo "0"   > /proc/sys/vm/clean_min_kbytes   &&
        echo "0"   > /proc/sys/vm/clean_low_kbytes   &&
        echo "60"  > /proc/sys/vm/swappiness         &&
        echo "100" > /proc/sys/vm/vfs_cache_pressure &&
        echo "10"  > /proc/sys/vm/watermark_scale_factor
       evalret
     fi

     ainitsvc "swap" "enabling swapfile as swap"
      swapon -p 100 "${swappath}"
     evalret
    ;;
    *)
     ainitmes "specify either zram or swapfile as \$2."; failprompt
     exit 1
    ;;
   esac
  ;;
  stop)
   checkswaps
  ;;
  *)
   ainitusage "{start|stop}"
   exit 1
  ;;
 esac
}

# 2.11 > acpid
svc_acpid(){
case "$1" in
 start)
  ainitsvc "acpid" "starting"
   acpid -n -S -f -c /mss/init/files/acpi >/dev/null 2>&1 &
  evalret
 ;;
 stop)
  ainitsvc "acpid" "stopping"
  ainit_kill acpid
 ;;
 *)
  ainitusage "{start|stop}"
  exit 1
 ;;
esac
}

# 2.12 > tor
svc_tor(){
 case "$1" in
  start)
   ainitsvc "tor" "starting"
    doas -u mss tor >/dev/null 2>&1 &
   evalret
  ;;
  reload)
   ainitsvc "tor" "cleaning"
    rm -rf /home/mss/.tor 2>&1
   evalret
  ;;
  stop)
   ainitsvc "tor" "stopping"
   ainit_kill tor
  ;;
  *)
   ainitusage "{start|stop}"
   exit 1
  ;;
 esac
}

# 2.13 > nginx
svc_nginx(){
 case "$1" in
  start)
   cdnginx

   ainitsvc "nginx" "creating tmpdir"
    tmpdir="/tmp/nginx"

    mkdir -p \
     "${tmpdir}"/client-body/ \
     "${tmpdir}"/fastcgi/     \
     "${tmpdir}"/logs/        \
     "${tmpdir}"/proxy/       \
     "${tmpdir}"/scgi/        \
     "${tmpdir}"/uwsgi/      &&

    chown -Rh mss:mss "${tmpdir}"
   evalret

   ainitsvc "nginx" "checking config"
    doas -u mss nginx -t >/dev/null 2>&1
   evalret

   ainitsvc "nginx" "starting"
    doas -u mss nginx >/dev/null 2>&1
   evalret
  ;;
  reload)
   cdnginx

   ainitsvc "nginx" "reloading"
    doas -u mss nginx -s reload >/dev/null 2>&1
   evalret
  ;;
  stop)
   nginxpid="$(pidof nginx)"

   if [ ! -z "${nginxpid}" ]
    then
     cdnginx stop; ngexit="${?}"

     ainitsvc "nginx" "quitting"
      if [ "${ngexit}" -eq 69 ]
       then
         for i in ${nginxpid}; do
          kill -QUIT "${i}" >/dev/null 2>&1 \
           || kill -TERM "${i}" >/dev/null 2>&1 \
            || kill -KILL "${i}" >/dev/null 2>&1
         done
       else
        doas -u mss nginx -s quit >/dev/null 2>&1 \
         || doas -u mss nginx -s stop >/dev/null 2>&1 \
          || for i in ${nginxpid}; do
              kill -KILL "${i}" >/dev/null 2>&1
             done
      fi
     evalret

     ainitsvc "nginx" "cleaning tmpdir"
      rm -rf /tmp/nginx >/dev/null 2>&1
     evalret
    else
     ainitsvc "nginx" "is not running"; failprompt
     exit 1
   fi
  ;;
  *)
   ainitusage "{start|reload|stop}"
   exit 1
  ;;
 esac
}

# 2.13 > bind
svc_bind(){
 case "$1" in
  start)
   if pidof named >/dev/null 2>&1
    then
     ainitsvc "bind" "is already running"; failprompt
    else
     ainitsvc "bind" "checking config"
      named-checkconf >/dev/null 2>&1
     evalret

     ainitsvc "bind" "setting nf_conntrack_udp_timeout"
      echo 10 > /proc/sys/net/netfilter/nf_conntrack_udp_timeout
     evalret

     ainitsvc "bind" "starting named"
      named >/dev/null 2>&1
     evalret
   fi
  ;;
  reload)
   ainitsvc "bind" "reloading"
    rndc reload >/dev/null 2>&1
   evalret
  ;;
  stop)
   if pidof named >/dev/null 2>&1
    then
     ainitsvc "bind" "stopping"
      rndc stop >/dev/null 2>&1
     evalret

     ainitsvc "bind" "restoring nf_conntrack_udp_timeout"
      echo 30 > /proc/sys/net/netfilter/nf_conntrack_udp_timeout
     evalret
    else
     ainitsvc "bind" "is not running"; failprompt
     exit 1
   fi
  ;;
  *)
   ainitusage "{start|reload|stop}"
   exit 1
  ;;
 esac
}

# 2.14 > pulseaudio
svc_pulseaudio(){
 case "$1" in
  start)
   if pidof pulseaudio >/dev/null 2>&1
    then
     ainitsvc "pulseaudio" "is already running"; failprompt
    else
     ainitsvc "pulseaudio" "starting"
      su - -c 'pulseaudio' >/dev/null 2>&1
     evalret
   fi
  ;;
  status)
   pactl info
  ;;
  stop)
   pulsepid="$(pidof pulseaudio)"

   if [ ! -z "${pulsepid}" ]
    then
     ainitsvc "pulseaudio" "stopping"
      pulseaudio -k >/dev/null 2>&1 \
       || for i in ${pulsepid}; do
           kill -TERM "${i}" >/dev/null 2>&1 \
            ||  kill -TERM "${i}" >/dev/null 2>&1
          done
     evalret
    else
     ainitsvc "pulseaudio" "is not running"; failprompt
   fi
  ;;
  *)
   ainitusage "{start|status|stop}"
   exit 1
  ;;
 esac
}
