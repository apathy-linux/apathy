#!/mss/bin/sh
. /mss/init/files/funcs

# 1 > pre genereation
# 1.1 > handle args
if [ -z "${1}" ];
 then
  ainitusage "{auto|amachine}"
  exit 1
 else
  hostslist="$(find /mss/files/machines/ -type f -name \*.conf \
                | awk '{gsub(/^.*\/|\.[^.]*$/,""); print}'     \
                | grep -v unrecognized)"
fi

# 1.2 > handle amachine
case "${1}" in
 auto)
  . /mss/files/device.conf
 ;;
 unrecognized)
  ainitmes "this machine is not recognized, create a configuration for it."; failprompt
  exit 1
 ;;
 *)
  amachine="${1}"
 ;;
esac

if ! echo "${hostslist}" | grep "${amachine}" >/dev/null 2>&1
 then
  ainitmes "no configuration for ${amachine} has been found."; failprompt
  exit 1
 else
  ainit_nc
  ainitmes "getting the rootfs ready for ${cb_yel}${amachine}${c_res}."; infoprompt
  ainit_nc
fi

# 1.3 > generate the os string for the ssh banner
ainitmes "reading /etc/${cb_blu}os-release${c_res}."
 getos && l2="${d_name} ${d_var} ${d_ver}"
evalret

# generate the hosts list for /etc/hosts
ainitmes "generating the ${cb_blu}hosts${c_res} list."
 hostslist="$(for i in ${hostslist}; do
               . /mss/files/machines/"${i}".conf
               echo "$(echo ${amach_ip} | sed 's/\/[^.]*$//g') ${hname}"
              done | sort)"
evalret

# 1.4 > load machine config
ainitmes "loading the machine ${cb_blu}config${c_res}."
 . /mss/files/machines/"${amachine}".conf
evalret
ainit_nc

# 1.5 > check if swapfile exists
ainitmes "checking for swapfile."; infoprompt
 if [ ! -f "${swappath}" ]
  then
   mkswapfile
  else
   ainitmes "swapfile found."; succprompt
 fi

# 1.6 > generate cmdline for swapfile
ainitmes "generating cmdline args for the ${cb_blu}swapfile${c_res}."
 swapuuid="$(blkid `mount | awk '/\/mnt\/mss\/stuff/{print $1}'` \
             | awk '{gsub(/\"/,""); print $3}')" &&
 swapoffs="$(filefrag -v "${swappath}" \
             | awk '$1=="0:" {print substr($4, 1, length($4)-2)}')"
evalret

# 1.7 > set /boot fstype
case "${boottype}" in
 uefi) bootfs="vfat" bootfsopts="defaults"         checkboot="0" ;;
 bios) bootfs="ext4" bootfsopts="defaults,noatime" checkboot="1" ;;
esac

# 2 > generation
# 2.1 > /etc/ssh/banner
ainit_nc
ainitmes "generating /etc/ssh/${cb_blu}banner${c_res}."
 l3="${hname} ($(echo ${amach_ip} | sed 's/\/[^.]*$//g'))" &&
 if [ ${#l2} -lt "${#l3}" ]; then len="${#l3}"; else len="${#l2}"; fi &&

 l2pad="$((${len} - ${#l2}))" &&
 l3pad="$((${len} - ${#l3}))" &&
 ltb="" l2s="" l3s=""         &&
 len="$((${len} + 4))"        &&

 i=0; until [ "${i}" -eq "$((${len} -2 ))" ]; do
  ltb="${ltb}─"
  i="$((${i} + 1))"
 done &&

 i=0; until [ "${i}" -eq ${l2pad} ]; do
  l2s="${l2s} "
  i="$((${i} + 1))"
 done &&

 i=0; until [ "${i}" -eq ${l3pad} ]; do
  l3s="${l3s} "
  i="$((${i} + 1))"
 done &&

 cat << EOF > /etc/ssh/banner

 ╔${ltb}╗
 │ ${l2}${l2s} │
 │ ${l3}${l3s} │
 ╚${ltb}╝

EOF
evalret

# 2.2 > /etc/resolv.conf
ainitmes "generating /etc/${cb_blu}resolv.conf${c_res}."
 cat << EOF > /etc/resolv.conf
nameserver ${dns1}
EOF

 if [ ! -z "${dns2}" ]; then cat << EOF >> /etc/resolv.conf
nameserver ${dns2}
EOF
 fi

evalret

# 2.3 > /etc/hosts
ainitmes "generating /etc/${cb_blu}hosts${c_res}."
 cat << EOF > /etc/hosts
127.0.0.1    localhost
127.0.1.1    ${hname} ${hname}

127.0.0.1    mpdboi
${hostslist}
EOF
evalret

# 2.4 > /etc/hostname
ainitmes "generating /etc/${cb_blu}hostname${c_res}."
 cat << EOF > /etc/hostname
${hname}
EOF
evalret

# 2.5 > /etc/fstab
ainitmes "generating /etc/${cb_blu}fstab${c_res}."
 cat << EOF | column -t > /etc/fstab
/dev/${amachine}apathy/rootfs  /              ext4      defaults,noatime                 0 1
/dev/${amachine}apathy/stuff   /mnt/mss/stuff ext4      rw,relatime,noatime,data=ordered 0 2

/dev/sda1                      /boot          ${bootfs} ${bootfsopts}                    0 ${checkboot}
/mnt/mss/stuff/techy-bits/home /home/mss      auto      defaults,nofail,nobootwait,bind  0 0
${fstab_extra}
EOF
evalret

# 2.6 > /etc/exports
ainitmes "generating /etc/${cb_blu}exports${c_res}."
 > /tmp/exports &&
 for i in ${nfs_exports}; do
  cat << EOF >> /tmp/exports
${i} *(rw,sync,no_root_squash,insecure,crossmnt)
EOF
 done
evalret

# 2.7 > bootloader
case "${boottype}" in
 uefi)
  # 2.7.1 > /etc/efibootmgr.conf
  ainitmes "generating /etc/${cb_blu}efibootmgr.conf${c_res}."
cat << EOF > /etc/efibootmgr.conf
#!/mss/bin/sh
    espdev="${bootdev}"
   esppart="$(echo ${bootpart} | sed "s|${bootdev}||g")"
  esplabel="apathy"
   espfile="\\EFI\\apathy\\bzImage.efi"
 espinitrd="\\EFI\\apathy\\initramfs.zst"
espcmdline="initrd=\${espinitrd} ${cmdline} resume=${swapuuid} resume_offset=${swapoffs}"
EOF
  evalret

  if [ -f "/etc/lilo.conf" ]; then
   ainitmes "nuking lilo.conf."
    rm -rf "/etc/lilo.conf"
   evalret
  fi

 ;;
 bios)
  # 2.7.2 > /etc/lilo.conf
  ainitmes "generating /etc/${cb_blu}lilo.conf${c_res}."
   cat << EOF > /etc/lilo.conf
boot=${bootdev}
map=/boot/map
default=apathy

lba32
compact

image=/boot/vmlinuz
	root=${bootpart}
	label=apathy
	append="${cmdline} resume=${swapuuid} resume_offset=${swapoffs}"
	initrd=/boot/initramfs.zst
EOF
  evalret

  if [ -f "/etc/efibootmgr.conf" ]; then
   ainitmes "nuking efibootmgr.conf."
    rm -rf "/etc/efibootmgr.conf"
   evalret
  fi
 ;;
esac

# 2.8 > /etc/pulse/daemon.conf
ainitmes "generating /etc/pulse/${cb_blu}daemon.conf${c_res}."
 cat << EOF > /etc/pulse/daemon.conf
daemonize               = yes
system-instance         = yes
exit-idle-time          = -1
fail                    = yes
allow-exit              = no
allow-module-loading    = yes
use-pid-file            = no

log-target              = syslog
log-level               = warn
log-meta                = no
log-time                = yes
log-backtrace           = 0

avoid-resampling        = ${pulse_avoid}
resample-method         = ${pulse_method}

default-sample-format   = ${pulse_format}
default-sample-rate     = ${pulse_rate}
default-sample-channels = 2
default-channel-map     = front-left,front-right
EOF
evalret

# 2.9 > /etc/X11/xorg.conf.d/01-machine.conf
ainitmes "generating /etc/X11/xorg.conf.d/${cb_blu}01-machine.conf${c_res}."
 [ ! -d [ "/etc/X11/xorg.conf.d" ] \
  && mkdir -pv /etc/X11/xorg.conf.d/ >/dev/null 2>&1
 echo "${x_gpu}\n\n${x_mon}\n\n${x_input}" > /etc/X11/xorg.conf.d/01-machine.conf
evalret

# 2.10 > /etc/thinkfan.conf
if awk '/^ ainitmgr/{gsub(/^#/,""); print}' \
    /mss/files/machines/${amachine}.conf \
    | grep thinkfan >/dev/null 2>&1
 then
  ainitmes "generating /etc/${cb_blu}thinkfan.conf${c_res}."

  tempfiles="$(/bin/ls -w1 /sys/class/hwmon/hwmon*/temp*_label)"
  fintemp="$(grep -l Package    ${tempfiles} \
             || grep -l Core\ 0 ${tempfiles} \
             || grep -l Tctl    ${tempfiles} )"

  if [ -z "${fintemp}" ]; then
   failprompt
   ainitmes "no hwmon file found."; failprompt
   exit 1
  fi

  cat << EOF > /etc/thinkfan.conf
sensors:
  - hwmon: $(echo "${fintemp}" | sed 's/label/input/g')

fans:
  - tpacpi: /proc/acpi/ibm/fan

levels:
  - ["level 0", 0, 50]
  - ["level 1", 50, 65]
  - ["level 3", 65, 80]
  - ["level disengaged", 80, 255]
EOF
  evalret
 else
  ainitmes "${cb_blu}thinkfan${c_res} is not requested."; infoprompt
  [ -f "/etc/thinkfan.conf" ] && rm -rf /etc/thinkfan.conf >/dev/null 2>&1
fi

ainit_nc
ainitmes "organizing /etc/${cb_blu}exports${c_res}."
 cat /tmp/exports | sed '/^$/d' | column -t > /etc/exports
evalret

ainit_nc
