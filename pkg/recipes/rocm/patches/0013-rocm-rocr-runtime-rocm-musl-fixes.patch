From dca37e0b1d94eeea16e2057c90bfd264f6c2195c Mon Sep 17 00:00:00 2001
From: must_eat <mss@tutanota.de>
Date: Thu, 20 Apr 2023 19:40:51 +0300
Subject: [PATCH 3/4] rocm-rocr-runtime-rocm musl fixes.

---
 src/core/util/lnx/os_linux.cpp | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/src/core/util/lnx/os_linux.cpp b/src/core/util/lnx/os_linux.cpp
index afa71bd..71d5409 100644
--- a/src/core/util/lnx/os_linux.cpp
+++ b/src/core/util/lnx/os_linux.cpp
@@ -107,9 +107,12 @@ class os_thread {
       for (int i = 0; i < cores; i++) {
         CPU_SET(i, cpuset);
       }
-      int err = pthread_attr_setaffinity_np(&attrib, CPU_ALLOC_SIZE(cores), cpuset);
+      int err;
+#ifdef __GLIBC__
+      err = pthread_attr_setaffinity_np(&attrib, CPU_ALLOC_SIZE(cores), cpuset);
       assert(err == 0 && "pthread_attr_setaffinity_np failed.");
       CPU_FREE(cpuset);
+#endif
     }
 
     int err = pthread_create(&thread, &attrib, ThreadTrampoline, args.get());
@@ -499,9 +502,10 @@ SharedMutex CreateSharedMutex() {
     assert(false && "rw lock attribute init failed.");
     return nullptr;
   }
+#ifdef __GLIBC__
   err = pthread_rwlockattr_setkind_np(&attrib, PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP);
   assert(err == 0 && "Set rw lock attribute failure.");
-
+#endif
   pthread_rwlock_t* lock = new pthread_rwlock_t;
   err = pthread_rwlock_init(lock, &attrib);
   if (err != 0) {
-- 
2.40.0

