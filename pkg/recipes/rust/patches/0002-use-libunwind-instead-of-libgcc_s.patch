From daba987986d3212db53a70287c725728f3f8fd70 Mon Sep 17 00:00:00 2001
From: mssx86 <mss@tutanota.de>
Date: Thu, 5 Aug 2021 11:30:34 +0300
Subject: [PATCH 2/5] use libunwind instead of libgcc_s.

---
 library/unwind/build.rs   |  5 ++---
 library/unwind/src/lib.rs | 18 ++----------------
 src/bootstrap/dist.rs     |  2 +-
 3 files changed, 5 insertions(+), 20 deletions(-)

diff --git a/library/unwind/build.rs b/library/unwind/build.rs
index 0529d24a2..36755866a 100644
--- a/library/unwind/build.rs
+++ b/library/unwind/build.rs
@@ -19,7 +19,7 @@ fn main() {
     } else if target.contains("linux") {
         // linking for Linux is handled in lib.rs
         if target.contains("musl") {
-            llvm_libunwind::compile();
+            println!("cargo:rustc-link-lib=unwind");
         } else if target.contains("android") {
             let build = cc::Build::new();

@@ -71,7 +71,6 @@ mod llvm_libunwind {
     /// Compile the libunwind C/C++ source code.
     pub fn compile() {
         let target = env::var("TARGET").expect("TARGET was not set");
-        let target_env = env::var("CARGO_CFG_TARGET_ENV").unwrap();
         let mut cc_cfg = cc::Build::new();
         let mut cpp_cfg = cc::Build::new();
         let root = Path::new("../../src/llvm-project/libunwind");
@@ -92,7 +91,7 @@ mod llvm_libunwind {
             cc_cfg.flag("-std=c99");
         }
 
-        if target.contains("x86_64-fortanix-unknown-sgx") || target_env == "musl" {
+        if target.contains("x86_64-fortanix-unknown-sgx") {
             // use the same GCC C compiler command to compile C++ code so we do not need to setup the
             // C++ compiler env variables on the builders.
             // Don't set this for clang++, as clang++ is able to compile this without libc++.
diff --git a/library/unwind/src/lib.rs b/library/unwind/src/lib.rs
index eaeec72fb..968e4b7d4 100644
--- a/library/unwind/src/lib.rs
+++ b/library/unwind/src/lib.rs
@@ -37,22 +37,8 @@ cfg_if::cfg_if! {
 }
 
 #[cfg(target_env = "musl")]
-cfg_if::cfg_if! {
-    if #[cfg(all(feature = "llvm-libunwind", feature = "system-llvm-libunwind"))] {
-        compile_error!("`llvm-libunwind` and `system-llvm-libunwind` cannot be enabled at the same time");
-    } else if #[cfg(feature = "llvm-libunwind")] {
-        #[link(name = "unwind", kind = "static")]
-        extern "C" {}
-    } else if #[cfg(feature = "system-llvm-libunwind")] {
-        #[link(name = "unwind", kind = "static-nobundle", cfg(target_feature = "crt-static"))]
-        #[link(name = "unwind", cfg(not(target_feature = "crt-static")))]
-        extern "C" {}
-    } else {
-        #[link(name = "unwind", kind = "static", cfg(target_feature = "crt-static"))]
-        #[link(name = "gcc_s", cfg(not(target_feature = "crt-static")))]
-        extern "C" {}
-    }
-}
+#[link(name = "unwind")]
+extern "C" {}
 
 // When building with crt-static, we get `gcc_eh` from the `libc` crate, since
 // glibc needs it, and needs it listed later on the linker command line. We
diff --git a/src/bootstrap/dist.rs b/src/bootstrap/dist.rs
index 856d57faf..829a22977 100644
--- a/src/bootstrap/dist.rs
+++ b/src/bootstrap/dist.rs
@@ -839,7 +839,7 @@ impl Step for Src {
         copy_src_dirs(
             builder,
             &builder.src,
-            &["library", "src/llvm-project/libunwind"],
+            &["library"],
             &[
                 // not needed and contains symlinks which rustup currently
                 // chokes on when unpacking.
-- 
2.32.0

