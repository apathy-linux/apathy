# 1
cdt1

tar xf /mss/work/sauces/rust-nightly-x86_64-unknown-linux-musl.tar.xz
cd     rust-nightly-x86_64-unknown-linux-musl/

mkdir ../rust/

syncboi \
 cargo/                              \
 rust-std-x86_64-unknown-linux-musl/ \
 rustc/                              \
 rustfmt*/                           \
\
 ../rust

sync

cd ../; rm -rf rust-nightly-x86_64-unknown-linux-musl/

# 2
cd rust/

rm -rfv \
 etc/             \
 share/           \
 lib/rustlib/etc/ \
 manifest.in

    elfs="$(find . -type f -exec file {} ';' | grep 'ELF ')"
elfs_exe="$(echo "${elfs}" | awk '/executable, /   {gsub(/:/,""); print $1}')"
elfs_dyn="$(echo "${elfs}" | awk '/shared object, /{gsub(/:/,""); print $1}')"
elfs_rel="$(echo "${elfs}" | awk '/relocatable, /  {gsub(/:/,""); print $1}')"

for i in ${elfs_exe}; do strip --strip-all      "${i}"; done
for i in ${elfs_dyn}; do strip --strip-unneeded "${i}"; done
for i in ${elfs_rel}; do strip --strip-debug    "${i}"; done

rlibs="$(find . -type f -name \*.rlib)"
  ars="$(find . -type f -name \*.a)"

for i in ${rlibs} ${ars}; do
 ${STRIP}  --strip-debug "${i}"
 ${RANLIB}               "${i}"
done

# 3
printf 'INPUT(-lunwind)\n'                      > lib/libgcc_s.so
ln -sf "$(${CC} -print-file-name=libunwind.so)"   lib/libgcc_s.so.1

cd ../

export            PATH="${PATH}:${PWD}/rust/bin"
export    LIBRARY_PATH="${LIBRARY_PATH}:${PWD}/rust/lib"
export LD_LIBRARY_PATH="${LIBRARY_PATH}"

       RUSTFLAGS="-Clinker=${CC} -Lnative=/opt/llvm/lib"
       RUSTFLAGS="${RUSTFLAGS} -Ctarget-cpu=x86-64 -Copt-level=3"
       RUSTFLAGS="${RUSTFLAGS} -Cdebuginfo=0 -Cdebug-assertions=off"
export RUSTFLAGS="${RUSTFLAGS} -Cembed-bitcode=yes -Clinker-plugin-lto -Clto=thin"

# 4
tar xf /mss/work/sauces/rustc-nightly-src.tar.xz
cd     rustc-nightly-src/

pdir="/mss/repo/pkg/recipes/rust/patches"
for file in "${pdir}"/*.patch; do patch -p1 < "${file}"; done

sed -i 's/crt_static_default = true/crt_static_default = false/' \
 ./compiler/rustc_target/src/spec/linux_musl_base.rs

for i in curl-sys libc; do
 sed -i 's/\("files":{\)[^}]*/\1/' vendor/${i}/.cargo-checksum.json
done

fdir="/mss/repo/pkg/recipes/rust/files"
cp -rv "${fdir}"/config-bootstrap.toml ./config.toml

export PKG_CONFIG_ALLOW_CROSS=1
export       LLVM_LINK_SHARED=1

time python3 ./x.py build -j "${ajobcount}"

# 5
instdir="${PWD}"/KEK
DESTDIR="${instdir}" python3 ./x.py install

cd "${instdir}"/

rm -rf \
 etc/                                                   \
 mss/work/table/rust/lib/rustlib/components             \
 mss/work/table/rust/lib/rustlib/etc/                   \
 mss/work/table/rust/lib/rustlib/install.log            \
 mss/work/table/rust/lib/rustlib/manifest-*             \
 mss/work/table/rust/lib/rustlib/rust-installer-version \
 mss/work/table/rust/lib/rustlib/uninstall.sh           \
 mss/work/table/rust/share/

    elfs="$(find . -type f -exec file {} ';' | grep 'ELF ')"
elfs_exe="$(echo "${elfs}" | awk '/executable, /   {gsub(/:/,""); print $1}')"
elfs_dyn="$(echo "${elfs}" | awk '/shared object, /{gsub(/:/,""); print $1}')"
elfs_rel="$(echo "${elfs}" | awk '/relocatable, /  {gsub(/:/,""); print $1}')"

for i in ${elfs_exe}; do strip --strip-all      "${i}"; done
for i in ${elfs_dyn}; do strip --strip-unneeded "${i}"; done
for i in ${elfs_rel}; do strip --strip-debug    "${i}"; done

rlibs="$(find . -type f -name \*.rlib)"
  ars="$(find . -type f -name \*.a)"

for i in ${rlibs} ${ars}; do
 ${STRIP}  --strip-debug "${i}"
 ${RANLIB}               "${i}"
done

rm -rf ../../rust/

mv mss/work/table/rust/ ../../

cd ../../; rm -rf rustc-nightly-src/

pkgup rust/ rust-bootstrap-0599b6b9
mv rust-bootstrap-0599b6b9.tar.zst \
 /mnt/mss/stuff/techy-bits/packaged-software/
