From ddbae408e820d177ceae439846cf8c1de6813d09 Mon Sep 17 00:00:00 2001
From: must_eat <mss@tutanota.de>
Date: Sun, 19 Mar 2023 16:02:38 +0300
Subject: [PATCH 01/11] llvm: musl fixes.

---
 llvm/include/llvm/Analysis/TargetLibraryInfo.h | 9 +++++++++
 llvm/lib/Support/Unix/DynamicLibrary.inc       | 2 +-
 2 files changed, 10 insertions(+), 1 deletion(-)

diff --git a/llvm/include/llvm/Analysis/TargetLibraryInfo.h b/llvm/include/llvm/Analysis/TargetLibraryInfo.h
index 8fcfbdbd6..0efa7664a 100644
--- a/llvm/include/llvm/Analysis/TargetLibraryInfo.h
+++ b/llvm/include/llvm/Analysis/TargetLibraryInfo.h
@@ -17,6 +17,15 @@
 #include "llvm/Pass.h"
 #include <optional>
 
+#undef fopen64
+#undef fseeko64
+#undef fstat64
+#undef fstatvfs64
+#undef ftello64
+#undef lstat64
+#undef stat64
+#undef tmpfile64
+
 namespace llvm {
 
 template <typename T> class ArrayRef;
diff --git a/llvm/lib/Support/Unix/DynamicLibrary.inc b/llvm/lib/Support/Unix/DynamicLibrary.inc
index 7b77da5e0..062e4ecb5 100644
--- a/llvm/lib/Support/Unix/DynamicLibrary.inc
+++ b/llvm/lib/Support/Unix/DynamicLibrary.inc
@@ -104,7 +104,7 @@ static void *DoSearch(const char *SymbolName) {
 // This macro returns the address of a well-known, explicit symbol
 #define EXPLICIT_SYMBOL(SYM)                                                   \
   if (!strcmp(SymbolName, #SYM))                                               \
-  return &SYM
+  return (void *)&SYM
 
 // Under glibc we have a weird situation. The stderr/out/in symbols are both
 // macros and global variables because of standards requirements. So, we
-- 
2.39.2

